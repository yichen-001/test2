buildscript {
    repositories {
        for (mavenRepositoryUrl in project.rootProject.ext.mavenRepositoryUrlList) {
            maven { url(mavenRepositoryUrl) }
        }
    }
}
plugins {
    id 'java'
}

group = project.rootProject.ext.constructGroupName("", project.getName())
version = project.rootProject.constructVersion()
sourceCompatibility = project.rootProject.ext.javaVersion
targetCompatibility = project.rootProject.ext.javaVersion

repositories {
    for (mavenRepositoryUrl in project.rootProject.ext.mavenRepositoryUrlList) {
        maven { url(mavenRepositoryUrl) }
    }
}

def scalaBinaryVersion = project.rootProject.ext.scalaBinaryVersion
dependencies {
    implementation(project.rootProject.ext.jarDependency("org.apache.flink", "flink-core"))
    implementation(project.rootProject.ext.jarDependency("org.apache.flink", "flink-java"))
    implementation(project.rootProject.ext.jarDependency("org.apache.flink", "flink-scala_${scalaBinaryVersion}"))
    implementation(project.rootProject.ext.jarDependency("org.apache.flink", "flink-clients_${scalaBinaryVersion}"))
    testImplementation(project.rootProject.ext.jarDependency("junit", "junit"))
}
test {
    useJUnit()
}

def mainClass = "flink.learning.example.word_count_batch.WordCountBatch"
def jarBaseName = "${project.getName()}-with-dependencies"
def jarPath = "${project.buildDir}/libs/${jarBaseName}-${project.getVersion()}.jar"
jar {
    manifest {
        attributes "Main-Class": mainClass
    }
    setArchivesBaseName(jarBaseName)
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

def flinkClientJarName = "flink-clients_2.11-1.11.2.jar"
def dependencyJarPath = "${project.buildDir}/dependencies"
task copyDependencies(type: Copy) {
    from configurations.default
    include "**/${flinkClientJarName}"
    into dependencyJarPath
}

task runWordCountBatch(type: Exec) {
    executable("java")
    args(
            "-classpath", "${dependencyJarPath}/${flinkClientJarName};${jarPath}",
            mainClass,
            "--input", "file:///${project.file("data").getAbsolutePath()}",
            "--output", "file:///${project.buildDir.getAbsolutePath()}/output",
    )
    doFirst {
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    dependsOn(jar)
    dependsOn(copyDependencies)
}

// ********************** build docker images **********************
def buildDockerPath = "${project.buildDir}/docker/"
def httpProxy = java.util.Optional.ofNullable(System.getenv("http_proxy")).orElse("")
def httpsProxy = java.util.Optional.ofNullable(System.getenv("https_proxy")).orElse("")

task copyFlinkPackage(type: Copy) {
    from project.rootProject.ext.flinkPackagePath
    into "${buildDockerPath}"
    dependsOn(":downloadFlinkPackage")
}
def keysDirectory = "${buildDockerPath}/keys"
def privateKeyFile = project.file("${keysDirectory}/id_rsa")
def publicKeyFile = project.file("${keysDirectory}/id_rsa.pub")
task generateKeys {
    doLast {
        if (privateKeyFile.exists() && publicKeyFile.exists()) {
            println("keys exists, do nothing...")
            return
        }
        privateKeyFile.getParentFile().mkdirs()
        exec {
            executable("ssh-keygen")
            args(
                    "-t", "rsa",
                    "-N", "",
                    "-f", privateKeyFile.getAbsolutePath()
            )
        }
    }
}
task copyJar(type: Copy) {
    from file(jarPath)
    into file(buildDockerPath)
    rename {
        fileName -> "${jarBaseName}.jar"
    }
    dependsOn(jar)
}
task copyData(type: Copy) {
    from project.file("data")
    into file("${buildDockerPath}/data")
}
def imageName = "single_cluster:${project.getVersion()}"
task buildImage(type: Exec) {
    executable("docker")
    args(
            "build", buildDockerPath,
            "-f", "${project.file("docker/single.cluster.dockerfile")}",
            "--build-arg", "http_proxy=${httpProxy}",
            "--build-arg", "https_proxy=${httpsProxy}",
            "-t", imageName,
    )
    doFirst {
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    doLast {
        println("start command: docker run --rm -d -p 8081:8081 -it ${imageName}")
    }
    dependsOn(generateKeys)
    dependsOn(copyFlinkPackage)
    dependsOn(copyJar)
    dependsOn(copyData)
}

def containerName = "single_cluster"
task restartDocker() {
    doLast {
        def exists = project.rootProject.ext.dockerContainerExists(containerName)
        if (exists) {
            project.rootProject.ext.stopDockerContainer(containerName)
        }
        def extendArgList = ["-p", "8081:8081"]
        project.rootProject.ext.startDockerContainer(containerName, imageName, extendArgList)
    }
}
task stopDocker() {
    onlyIf {
        def exists = project.rootProject.ext.dockerContainerExists(containerName)
        if (!exists) {
            println("${containerName} not exists, do nothing.")
        }
        return exists
    }
    doLast {
        project.rootProject.ext.stopDockerContainer(containerName)
    }
}
